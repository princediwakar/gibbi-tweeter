name: Post-Deployment Tweet Pipeline Initialization

on:
  # Trigger when deployment is successful
  deployment_status:
    types: [success]
    
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL (e.g., https://gibbi-tweeter.vercel.app)'
        required: true
        type: string

jobs:
  initialize-tweet-pipeline:
    runs-on: ubuntu-latest
    name: Initialize Tweet Pipeline
    
    # Only run for production deployments
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Wait for deployment to be ready
        run: |
          echo "🕐 Waiting 60 seconds for deployment to be fully ready..."
          sleep 60
      
      - name: Get deployment URL
        id: get-url
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_URL="${{ inputs.deployment_url }}"
          else
            DEPLOY_URL="${{ github.event.deployment_status.target_url }}"
          fi
          
          # Remove trailing slash if present
          DEPLOY_URL=${DEPLOY_URL%/}
          
          echo "🌐 Deployment URL: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT
      
      - name: Initialize Tweet Pipeline
        env:
          DEPLOY_URL: ${{ steps.get-url.outputs.DEPLOY_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
        run: |
          echo "🚀 Initializing tweet pipeline for deployment: $DEPLOY_URL"
          
          # Prepare authorization header if CRON_SECRET is available
          if [[ -n "$CRON_SECRET" ]]; then
            AUTH_HEADER="Authorization: Bearer $CRON_SECRET"
            echo "🔐 Using CRON_SECRET for authorization"
          else
            AUTH_HEADER="Authorization: Bearer deployment-init"
            echo "⚠️ No CRON_SECRET found, using default authorization"
          fi
          
          # Call startup initialization endpoint
          response=$(curl -s -w "%{http_code}" \
            -X POST "$DEPLOY_URL/api/startup-init" \
            -H "$AUTH_HEADER" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Deploy-Init" \
            --connect-timeout 30 \
            --max-time 120)
          
          # Extract HTTP status code (last 3 characters)
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "📊 HTTP Status: $http_code"
          
          if [[ "$http_code" == "200" ]]; then
            echo "✅ Tweet pipeline initialized successfully!"
            echo "$response_body" | jq '.' || echo "$response_body"
          else
            echo "❌ Failed to initialize tweet pipeline"
            echo "Response: $response_body"
            
            # Don't fail the workflow for initialization errors
            # The cron job will handle initialization on its next run
            echo "⏰ Pipeline will be initialized on next cron trigger (every 15 minutes)"
            exit 0
          fi
      
      - name: Verify Pipeline Status
        env:
          DEPLOY_URL: ${{ steps.get-url.outputs.DEPLOY_URL }}
        run: |
          echo "🔍 Checking pipeline status..."
          
          pipeline_status=$(curl -s "$DEPLOY_URL/api/deployment-init" || echo '{"error": "failed to check"}')
          
          echo "📊 Pipeline Status:"
          echo "$pipeline_status" | jq '.' || echo "$pipeline_status"
          
          # Extract tweet count if possible
          tweet_count=$(echo "$pipeline_status" | jq -r '.currentPipelineCount // "unknown"' 2>/dev/null || echo "unknown")
          
          if [[ "$tweet_count" != "unknown" && "$tweet_count" -ge 5 ]]; then
            echo "🎉 Pipeline is healthy with $tweet_count tweets!"
          else
            echo "⚠️ Pipeline status unclear - will be handled by auto-chain system"
          fi
          
          echo "✅ Post-deployment initialization complete!"